#%RAML 1.0
---
title: Identity
version: v1
baseUri: https://api-sandbox.lifeengine.io
mediaType: application/json
description: |
  The Identity API provides means to create, update and delete digital twins
  (identities) and manage links between them.
  The links provides the direction and type (sometimes called role) of the link.
types:
  identity:
    type: object
    properties:
      type:
        description: The type of the identity
        type: string
      data:
        description: Additional data for the identity.
        type: object
        properties:
          name:
            description: The name of the identity
            type: string
  link:
    type: object
    properties:
      type:
        description: The type of the link
        type: string
      data?:
        description: Additional key-value data for the link.
        type: object
/identities/v1:
  description: |
    Create a new identity.
  post:
    description: Create a new identity
    headers:
      Authorization: !include includes/properties/authorization-headers.yaml
    body:
      type: identity
      example: !include includes/examples/identity-create.json
    responses:
      201:
        body:
          properties: !include includes/properties/identity.yaml
          example: !include includes/examples/identity-without-links.json
      401:
        body:
          example: !include includes/examples/unauthorized-401.json
      422:
        body:
          example: |
            {
              "error": {
                "status": 422,
                "message": "Could not create identity."
              }
            }
  /{id}:
    description: Read, update and delete identities.
    uriParameters:
      id:
        description: The ID of the Identity
        type: string
        example: 2584bdd7-1cb2-48ed-a106-2a1b817cf909
    get:
      description: |
        Read one identity by id. Requires the `read` permission on the
        identity.
      headers:
        Authorization: !include includes/properties/authorization-headers.yaml
      responses:
        200:
          body:
            properties: !include includes/properties/identity.yaml
            example: !include includes/examples/identity.json
        401:
          body:
            example: !include includes/examples/unauthorized-401.json
        404:
          body:
            example: !include includes/examples/identity-not-found.json
    put:
      description: |
        Update an identity by id. Requires the `write` permission on the
        identity.
      headers:
        Authorization: !include includes/properties/authorization-headers.yaml
      body:
        type: identity
        example: !include includes/examples/identity-update.json
      responses:
        200:
          body:
            properties: !include includes/properties/identity.yaml
            example: !include includes/examples/identity.json
        401:
          body:
            example: !include includes/examples/unauthorized-401.json
        403:
          body:
            example: !include includes/examples/acl-permission-denied-403.json
        404:
          body:
            example: !include includes/examples/identity-not-found.json
        422:
          body:
            example: |
              {
                "error": {
                  "status": 422,
                  "message": "Could not update identity."
                }
              }
    delete:
      description: |
        Delete an identity by id. Requires the `manage` permission on the
        identity.
      headers:
        Authorization: !include includes/properties/authorization-headers.yaml
      responses:
        204:
          body:
            example: {}
        401:
          body:
            example: !include includes/examples/unauthorized-401.json
        403:
          body:
            example: !include includes/examples/acl-permission-denied-403.json
        404:
          body:
            example: !include includes/examples/identity-not-found.json
        422:
          body:
            examples:
              "Restricted identity type": |
                {
                  "error": {
                    "status": 422,
                    "message": "Could not delete identity. Try using corresponding APIs to delete this type of identities."
                  }
                }
              "Links exists": |
                {
                  "error": {
                    "status": 422,
                    "message": "Could not delete identity, reason: links exist to or from the identity."
                  }
                }
  /{from_identity}/link/{to_identity}:
    description: Manage links between "from"- and "to"-identities.
    uriParameters:
      from_identity:
        description: The starting identity ID of the link
        type: string
        example: 8d8b1ea6-52b7-4bbc-89b0-f7604422dffd
      to_identity:
        description: The ending identity ID of the link
        type: string
        example: a2a161c9-a7ff-47e7-9b70-4bf4a83bcb90
    post:
      description: Creates a new link between two identities
      headers:
        Authorization: !include includes/properties/authorization-headers.yaml
      body:
        type: link
        example: !include includes/examples/link-create.json
      responses:
        201:
          body:
            properties: !include includes/properties/link.yaml
            example: !include includes/examples/link.json
        401:
          body:
            example: !include includes/examples/unauthorized-401.json
        403:
          body:
            example: !include includes/examples/acl-permission-denied-403.json
        404:
          body:
            examples:
              'From identity not found': |
                {
                  "error": {
                    "status": 404,
                    "message": "From identity not found."
                  }
                }
              'To identity not found': |
                {
                  "error": {
                    "status": 404,
                    "message": "To identity not found."
                  }
                }
        409:
          body:
            example: |
              {
                "error": {
                  "status": 409,
                  "message": "Could not create link. Does a link of type MemberOf already exist from 59de4a29-944e-4141-a6c9-f5d7bb7707b0 to 7a13c5f6-cf8b-4d18-9f8a-9b884bc6e817?"
                }
              }
        422:
          body:
            example: |
              {
                "error": {
                  "status": 422,
                  "message": "Could not create link."
                }
              }
    /{type}:
      description: |
        Read, update and delete a link of a specific type between the "from"- and "to"-identities.
      uriParameters:
        type:
          description: The `type` of the link, for example `Link`, `Tenant` or `Owner`
          type: string
          example: Owner
      get:
        description: Read a link by type
        headers:
          Authorization: !include includes/properties/authorization-headers.yaml
        responses:
          200:
            body:
              properties: !include includes/properties/link.yaml
              example: !include includes/examples/link.json
          401:
            body:
              example: !include includes/examples/unauthorized-401.json
          404:
            body:
              example: !include includes/examples/link-not-found.json
      put:
        description: Update a link
        headers:
          Authorization: !include includes/properties/authorization-headers.yaml
        body:
        responses:
          201:
            body:
              properties: !include includes/properties/link.yaml
              example: !include includes/examples/link.json
          401:
            body:
              example: !include includes/examples/unauthorized-401.json
          403:
            body:
              example: !include includes/examples/acl-permission-denied-403.json
          404:
            body:
              examples:
                'From identity not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "From identity not found."
                    }
                  }
                'To identity not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "To identity not found."
                    }
                  }
                'Link not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "Link of type <type> not found."
                    }
                  }
          422:
            body:
              example: |
                {
                  "error": {
                    "status": 422,
                    "message": "Could not update link."
                  }
                }
      delete:
        description: Delete a link by type
        headers:
          Authorization: !include includes/properties/authorization-headers.yaml
        responses:
          204:
            body:
              example: {}
          401:
            body:
              example: !include includes/examples/unauthorized-401.json
          403:
            body:
              example: !include includes/examples/acl-permission-denied-403.json
          404:
            body:
              examples:
                'From identity not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "From identity not found."
                    }
                  }
                'To identity not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "To identity not found."
                    }
                  }
                'Link not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "Link of type <type> not found."
                    }
                  }
                'ACL not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "Not Found: ACL for identity '<id>' not found."
                    }
                  }
          422:
            body:
              example: |
                {
                  "error": {
                    "status": 422,
                    "message": "Could not delete link."
                  }
                }

  /{id}/links:
    uriParameters:
      id:
        description: The ID of the identity
        type: string
        example: a2a161c9-a7ff-47e7-9b70-4bf4a83bcb90
    /in:
      get:
        description: |
          List incoming links. If the optional `type` GET-parameter is given, only list
          links by that type.
        queryParameters:
          type?:
            description: |
              If given to `GET /identities/{version}/{id}/links/in?type=OwnerOf`,
              will list only the links of `type: "OwnerOf"`.
            type: string
            example: /identities/{version}/{id}/links/in?type=OwnerOf
          limit?:
            description: Limit the amount of records returned. Defaults to 100.
            type: integer
            example: 50
          offset?:
            description: How many records to skip. Defaults to 0.
            type: integer
            example: 100
        headers:
          Authorization: !include includes/properties/authorization-headers.yaml
        responses:
          200:
            body:
              properties: !include includes/properties/links.yaml
              example: !include includes/examples/links.json
          401:
            body:
              example: !include includes/examples/unauthorized-401.json
          404:
            body:
              example: !include includes/examples/identity-not-found.json
    /out:
      get:
        description: |
          List outgoing links. If the optional `type` GET-parameter is given, only list
          links by that type.
        queryParameters:
          type?:
            description: |
              If given to `GET /identities/{version}/{id}/links/out?type=OwnerOf`,
              will list only the links of `type: "OwnerOf"`.
            type: string
            example: /identities/{version}/{id}/links/out?type=OwnerOf
          limit?:
            description: Limit the amount of records returned. Defaults to 100.
            type: integer
            example: 50
          offset?:
            description: How many records to skip. Defaults to 0.
            type: integer
            example: 100
        headers:
          Authorization: !include includes/properties/authorization-headers.yaml
        responses:
          200:
            body:
              properties: !include includes/properties/links.yaml
              example: !include includes/examples/links.json
          401:
            body:
              example: !include includes/examples/unauthorized-401.json
          404:
            body:
              example: !include includes/examples/identity-not-found.json
  /dataProduct/{nexus_id}/{data_product}:
    uriParameters:
      nexus_id:
        description: The UUID of the Nexus the DataProduct is published on.
        type: string
        example: 60d9f38e-f52e-4d0b-92da-83f08f68add8
      data_product:
        description: The standard of the DataProduct.
        type: string
        example: Weather/Current/Metric
    get:
      description: |
        Find and read a DataProduct identity published on a Nexus.
      queryParameters:
        source:
          description: |
            The name of the source for the data product.
          type: string
          example: "ExampleOpenWeatherMap"
      headers:
        Authorization: !include includes/properties/authorization-headers.yaml
      responses:
        200:
          body:
            properties: !include includes/properties/identity.yaml
            example: !include includes/examples/dataproduct.json
        401:
          body:
            example: !include includes/examples/unauthorized-401.json
        404:
          body:
            example: !include includes/examples/identity-not-found.json
  /data-product/my-sources:
    get:
      description: List your own data product sources.
      headers:
        Authorization: !include includes/properties/authorization-headers.yaml
        X-Nexus-Token: !include includes/properties/nexus-headers.yaml
      queryParameters:
        limit?:
          description: Limit the amount of records returned. Defaults to 100.
          type: integer
          example: 50
        offset?:
          description: How many records to skip. Defaults to 0.
          type: integer
          example: 100
      responses:
        200:
          body:
            properties: !include includes/properties/data-product-list-response.yaml
            example: !include includes/examples/data-product-list-response.json
        401:
          body:
            example: !include includes/examples/unauthorized-401.json
        422:
          body:
            example: !include includes/examples/invalid-nexus-token-422.json
  /data-product/search:
    post:
      description: Search data product sources connected to a Nexus.
      headers:
        X-Nexus-Token: !include includes/properties/nexus-headers.yaml
      queryParameters:
        limit?:
          description: Limit the amount of records returned. Defaults to 100.
          type: integer
          example: 50
        offset?:
          description: How many records to skip. Defaults to 0.
          type: integer
          example: 100
      body:
        properties: !include includes/properties/data-product-search-request.yaml
        example: !include includes/examples/data-product-search.json
      responses:
        200:
          body:
            properties: !include includes/properties/data-product-list-response.yaml
            example: !include includes/examples/data-product-list-response.json
        422:
          body:
            example: !include includes/examples/invalid-nexus-token-422.json
  /{user_id}/is-developer-of/{identity_id}:
    uriParameters:
      user_id:
        description: The UUID of the Person/User.
        type: string
        example: 9a08ecf6-6526-4e7c-b27c-62cc445017b2
      identity_id:
        description: The UUID of the target Identity
        type: string
        example: cab4fbbb-3df5-43d9-b761-7ab7661a773b
    get:
      description: |
        Check if a user is a developer of the given identity. This means
        there's a MemberOf link from the Person to some intermediate identity
        (for example a Group) and from that a DeveloperOf link to the target
        identity (for example an App or a DataProduct).
      headers:
        Authorization: !include includes/properties/authorization-headers.yaml
      responses:
          200:
            body:
              properties: !include includes/properties/developer-of.yaml
              example: !include includes/examples/developer-of.json
          401:
            body:
              example: !include includes/examples/unauthorized-401.json
